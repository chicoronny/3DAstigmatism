package org.swing;


import ij.IJ;
import ij.ImagePlus;
import ij.gui.Roi;
import ij.gui.StackWindow;
import ij.plugin.FolderOpener;

import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;

import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Document;

import org.data.Calibration;
import org.data.FittedPeak;
import org.data.csvWriter;
import org.main.Calibrator;
import org.main.Pipeline;

/**
 *
 * @author Ries
 */
public class PluginFrame extends javax.swing.JFrame {

    /**
     * Creates new form Plugin
     */
    public PluginFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        panel = new javax.swing.JPanel();

        jButton_cal = new javax.swing.JButton();
        jButton_loc = new javax.swing.JButton();
        jpanel_cal = new javax.swing.JPanel();  
        jpanel_loc = new javax.swing.JPanel();
        
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE  );

        //////////////////////////
        /// Position
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        // Determine the new location of the window
        int w = this.getSize().width;
        int h = this.getSize().height;
        int x = (dim.width-w)/2;
        int y = (dim.height-h)/2;
        // Move the window
        this.setLocation(x, y);
        
        panel.setPreferredSize(new java.awt.Dimension(250, 300));
        panel.setLayout(new java.awt.CardLayout());

        //////////////////////////
        /// Calibration and localization buttons
        jButton_cal.setText("New calibration");
        jButton_cal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_calActionPerformed(evt);
            }
        });

        jButton_loc.setText("Localize");
        jButton_loc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_locActionPerformed(evt);
            }
        });
        
        //////////////////////////
        /// Default empty panel
        jpanel_default = new javax.swing.JPanel();

        javax.swing.GroupLayout jpanel_defaultLayout = new javax.swing.GroupLayout(jpanel_default);
        jpanel_default.setLayout(jpanel_defaultLayout);
        jpanel_defaultLayout.setHorizontalGroup(
            jpanel_defaultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 272, Short.MAX_VALUE)
        );
        jpanel_defaultLayout.setVerticalGroup(
            jpanel_defaultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 304, Short.MAX_VALUE)
        );

        panel.add(jpanel_default, "def");
        
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Calibration
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        jButton_import = new javax.swing.JButton();
        jTextField_calimname = new javax.swing.JTextField();
        jLabel_stepsize = new javax.swing.JLabel();
        jTextField_stepsize = new javax.swing.JTextField();
        jButton_roi = new javax.swing.JButton();
        jTextField_roi = new javax.swing.JTextField();
        jButton_calfit = new javax.swing.JButton();
        jTextField_calfit = new javax.swing.JTextField();
        jLabel_range = new javax.swing.JLabel();
        jTextField_rangemin = new javax.swing.JTextField();
        jTextField_rangemax = new javax.swing.JTextField();
        jLabel_rangehyph = new javax.swing.JLabel();
        jButton_calfitcurves = new javax.swing.JButton();
        jTextField_calfitcurves = new javax.swing.JTextField();
        jButton_calsave = new javax.swing.JButton();
        
        jpanel_cal.setBorder(javax.swing.BorderFactory.createTitledBorder("Calibration"));

        //////////////////////////
        /// Import images
        jButton_import.setText("Import");
        jButton_import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_importActionPerformed(evt);
            }
        });

        jTextField_calimname.setEditable(false); 
        jTextField_calimname.setText("Image name");

        //////////////////////////
        /// Step size
        jLabel_stepsize.setText("Step size (nm) :");
        jTextField_stepsize.setText(Integer.toString(default_step));
        
        DocumentListener documentListener_step = new DocumentListener() {
            public void changedUpdate(DocumentEvent documentEvent) {
              printIt(documentEvent);
            }
            public void insertUpdate(DocumentEvent documentEvent) {
              printIt(documentEvent);
            }
            public void removeUpdate(DocumentEvent documentEvent) {
              printIt(documentEvent);
            }
            private void printIt(DocumentEvent documentEvent) {
            	if(!isNumeric(jTextField_stepsize.getText())){
            		zstep = default_step;
            	} else {
            		zstep = Integer.parseInt(jTextField_stepsize.getText());
            	}
            }
        };
        jTextField_stepsize.getDocument().addDocumentListener(documentListener_step);
        

        //////////////////////////
        /// ROI
        jButton_roi.setText("Select ROI");
        jButton_roi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_roiActionPerformed(evt);
            }
        });

        jTextField_roi.setEditable(false);
        jTextField_roi.setText("ROI position");


        //////////////////////////
        /// Fit stack
        jButton_calfit.setText("Fit bead");
        jButton_calfit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_calfitActionPerformed(evt);
            }
        });

        jTextField_calfit.setEditable(false);
        jTextField_calfit.setText("Waiting");

        //////////////////////////
        /// Range of calibration curve fit
        jLabel_range.setText("Range (nm) :");
        jLabel_rangehyph.setText("-");

        jTextField_rangemin.setText(Integer.toString(default_rmin));
        DocumentListener documentListener_rmin = new DocumentListener() {
            public void changedUpdate(DocumentEvent documentEvent) {
              printIt(documentEvent);
            }
            public void insertUpdate(DocumentEvent documentEvent) {
              printIt(documentEvent);
            }
            public void removeUpdate(DocumentEvent documentEvent) {
              printIt(documentEvent);
            }
            private void printIt(DocumentEvent documentEvent) {
            	if(!isNumeric(jTextField_rangemin.getText())){
            		rangeMin = default_rmin;
            	} else {
            		rangeMin = Integer.parseInt(jTextField_rangemin.getText());
            	}
            }
        };
        jTextField_rangemin.getDocument().addDocumentListener(documentListener_rmin);
        
        jTextField_rangemax.setText(Integer.toString(default_rmax));
        DocumentListener documentListener_rmax = new DocumentListener() {
            public void changedUpdate(DocumentEvent documentEvent) {
              printIt(documentEvent);
            }
            public void insertUpdate(DocumentEvent documentEvent) {
              printIt(documentEvent);
            }
            public void removeUpdate(DocumentEvent documentEvent) {
              printIt(documentEvent);
            }
            private void printIt(DocumentEvent documentEvent) {
            	if(!isNumeric(jTextField_rangemax.getText())){
            		rangeMax = default_rmax;
            	} else {
            		rangeMax = Integer.parseInt(jTextField_rangemax.getText());
            	}
            }
        };
        jTextField_rangemax.getDocument().addDocumentListener(documentListener_rmax);

        //////////////////////////
        /// Fit calibration curves
        jButton_calfitcurves.setText("Fit curves");
        jButton_calfitcurves.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_calfitcurvesActionPerformed(evt);
            }
        });

        jTextField_calfitcurves.setEditable(false);
        jTextField_calfitcurves.setText("Waiting");

        //////////////////////////
        /// Save 
        jButton_calsave.setText("Save calibration");
        jButton_calsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_calsaveActionPerformed(evt);
            }
        });

        //////////////////////////
        /// Layout
        javax.swing.GroupLayout jpanel_calLayout = new javax.swing.GroupLayout(jpanel_cal);
        jpanel_cal.setLayout(jpanel_calLayout);
        jpanel_calLayout.setHorizontalGroup(
            jpanel_calLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanel_calLayout.createSequentialGroup()
                .addGroup(jpanel_calLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpanel_calLayout.createSequentialGroup()
                        .addGroup(jpanel_calLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpanel_calLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel_stepsize)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField_stepsize, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpanel_calLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButton_roi)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField_roi, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jpanel_calLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jpanel_calLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpanel_calLayout.createSequentialGroup()
                                .addComponent(jButton_import, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(jTextField_calimname))
                            .addGroup(jpanel_calLayout.createSequentialGroup()
                                .addGroup(jpanel_calLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton_calfit, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel_range))
                                .addGap(21, 21, 21)
                                .addGroup(jpanel_calLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpanel_calLayout.createSequentialGroup()
                                        .addComponent(jTextField_rangemin, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel_rangehyph)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField_rangemax, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jTextField_calfit)))
                            .addGroup(jpanel_calLayout.createSequentialGroup()
                                .addComponent(jButton_calfitcurves, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField_calfitcurves, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(jpanel_calLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jButton_calsave)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpanel_calLayout.setVerticalGroup(
            jpanel_calLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanel_calLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanel_calLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_import)
                    .addComponent(jTextField_calimname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jpanel_calLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_stepsize)
                    .addComponent(jTextField_stepsize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpanel_calLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_roi)
                    .addComponent(jTextField_roi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpanel_calLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_calfit)
                    .addComponent(jTextField_calfit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpanel_calLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_range)
                    .addComponent(jTextField_rangemin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_rangemax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_rangehyph))
                .addGap(18, 18, 18)
                .addGroup(jpanel_calLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_calfitcurves)
                    .addComponent(jTextField_calfitcurves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jButton_calsave))
        );

        panel.add(jpanel_cal, "cal");
        
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Localization
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        jButton_loadcal = new javax.swing.JButton();
        jTextField_loccalname = new javax.swing.JTextField();
        jButton_locfit = new javax.swing.JButton();
        jButton_loadim = new javax.swing.JButton();
        jTextField_imname = new javax.swing.JTextField();
        jLabel_fitmethod = new javax.swing.JLabel();
        jComboBox_fitmethod = new javax.swing.JComboBox();
        jLabel_winsize = new javax.swing.JLabel();
        jTextField_winsize = new javax.swing.JTextField();
        jButton_locsave = new javax.swing.JButton();
        jCheckBox_medianfilter = new javax.swing.JCheckBox();
        jButton_locstop = new javax.swing.JButton();


        jpanel_loc.setBorder(javax.swing.BorderFactory.createTitledBorder("Localize"));
        
        //////////////////////////
        /// Load calibration
        jButton_loadcal.setText("Load calibration");
        jButton_loadcal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_loadcalActionPerformed(evt);
            }
        });

        jTextField_loccalname.setEditable(false);
        jTextField_loccalname.setText("Calibration name");

        //////////////////////////
        /// Load images
        jButton_loadim.setText("Load images");
        jButton_loadim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_loadimActionPerformed(evt);
            }
        });
        jTextField_imname.setEditable(false);
        jTextField_imname.setText("Stack name");

        

        //////////////////////////
        /// Fit method
        jLabel_fitmethod.setText("Fit method :");

        //jComboBox_fitmethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2D Elliptical Gauss", "1D Gauss proj", "Centroid" }));
        jComboBox_fitmethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2D Elliptical Gauss", "Centroid" }));
        jComboBox_fitmethod.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBox_fitmethodPropertyChange(evt);
            }
        });

        //////////////////////////
        /// Median filtering
        jLabel_winsize.setText("Median filter size :");
        jTextField_winsize.setText(Integer.toString(default_wsize));
        
        DocumentListener documentListener_wsize = new DocumentListener() {
            public void changedUpdate(DocumentEvent documentEvent) {
              printIt(documentEvent);
            }
            public void insertUpdate(DocumentEvent documentEvent) {
              printIt(documentEvent);
            }
            public void removeUpdate(DocumentEvent documentEvent) {
              printIt(documentEvent);
            }
            private void printIt(DocumentEvent documentEvent) {
            	if(!isNumeric(jTextField_winsize.getText())){
            		winsize = default_wsize;
            	} else {
            		winsize = Integer.parseInt(jTextField_winsize.getText());
            	}
            }
        };
        jTextField_winsize.getDocument().addDocumentListener(documentListener_wsize);
        
        jCheckBox_medianfilter.setSelected(true);
        jCheckBox_medianfilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_medianfilterActionPerformed(evt);
            }
        });

        //////////////////////////
        /// Fit stack
        jButton_locfit.setText("Fit stack");
        jButton_locfit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_locfitActionPerformed(evt);
            }
        });

        //////////////////////////
        /// Stop localizing
        jButton_locstop.setText("Stop");
        jButton_locstop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_locstopActionPerformed(evt);
            }
        });

        
        //////////////////////////
        /// Save results
        jButton_locsave.setText("Save");
        jButton_locsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_locsaveActionPerformed(evt);
            }
        });
        
        //////////////////////////
        /// Layout
        javax.swing.GroupLayout jpanel_locLayout = new javax.swing.GroupLayout(jpanel_loc);
        jpanel_loc.setLayout(jpanel_locLayout);
        jpanel_locLayout.setHorizontalGroup(
            jpanel_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanel_locLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jpanel_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpanel_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton_loadim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_loadcal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jpanel_locLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jpanel_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton_locfit)
                            .addGroup(jpanel_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel_winsize)
                                .addComponent(jLabel_fitmethod)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpanel_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField_loccalname)
                    .addComponent(jTextField_imname)
                    .addGroup(jpanel_locLayout.createSequentialGroup()
                        .addGroup(jpanel_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox_fitmethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jpanel_locLayout.createSequentialGroup()
                                .addComponent(jTextField_winsize, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBox_medianfilter))
                            .addComponent(jButton_locstop, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jpanel_locLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(jButton_locsave, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpanel_locLayout.setVerticalGroup(
            jpanel_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanel_locLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanel_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_loadcal)
                    .addComponent(jTextField_loccalname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpanel_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_loadim)
                    .addComponent(jTextField_imname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jpanel_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_fitmethod)
                    .addComponent(jComboBox_fitmethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpanel_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox_medianfilter)
                    .addGroup(jpanel_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel_winsize)
                        .addComponent(jTextField_winsize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addGroup(jpanel_locLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_locfit)
                    .addComponent(jButton_locstop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_locsave)
                .addContainerGap(54, Short.MAX_VALUE))
        );
        panel.add(jpanel_loc, "loc");

        
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Global layout
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jButton_cal)
                .addGap(18, 18, 18)
                .addComponent(jButton_loc, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_cal)
                    .addComponent(jButton_loc))
                .addGap(18, 18, 18)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////
    //// Action handlers
    

    /////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////
    // General
    private void jButton_locActionPerformed(java.awt.event.ActionEvent evt) {                                            
         CardLayout card = (CardLayout) panel.getLayout();
         card.show(panel, "loc");
    }                                           

    private void jButton_calActionPerformed(java.awt.event.ActionEvent evt) {                                            
         CardLayout card = (CardLayout) panel.getLayout();
         card.show(panel, "cal");
    }                                           


    /////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////
    // Calibration                                   

    // import images
    private void jButton_importActionPerformed(java.awt.event.ActionEvent evt) {                                               
    	JFileChooser fc = new JFileChooser();
    	fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    	
    	int returnVal = fc.showOpenDialog(this);
    	 
        if (returnVal != JFileChooser.APPROVE_OPTION)
        	return;
        
        File file = fc.getSelectedFile();
        jTextField_calimname.setText(file.getName());
        cal_filePath = file.getAbsolutePath();
        
        if (file.isDirectory()){
        	cal_im = FolderOpener.open(cal_filePath);
        }
        
        if (file.isFile()){
        	cal_im = new ImagePlus(cal_filePath);
        }
        
        cal_nSlice = cal_im.getNSlices();
		new StackWindow(cal_im);
		cal_im.setRoi((int) (cal_im.getWidth()/2 - 10), (int) (cal_im.getHeight()/2 - 10), 20, 20);		
		stack_fitted =false;		
		curve_fitted =false;
    }                                              

    // get the ROI
    private void jButton_roiActionPerformed(java.awt.event.ActionEvent evt) {                                            
    	Roi roitemp = cal_im.getRoi();
    	if (roitemp.getType() != Roi.RECTANGLE)  {
			IJ.showMessage("Needs a rectangle ROI.");
			return;
		}
		try{																				
			double w = roitemp.getFloatWidth();
			double h = roitemp.getFloatHeight();
			if (w!=h) {
				IJ.showMessage("Needs a quadratic ROI /n(hint: press Shift).");
				return;
			}
			jTextField_roi.setText("Roi ("+w+","+h+")");
			isRoi = true;																		// what is it for?
			roi = roitemp;
		} catch (NullPointerException e) {
			roi = new Roi(0, 0, cal_im.getWidth(), cal_im.getHeight());
			jTextField_roi.setText("Whole image");
		} 
    }                                           

    // fit the images
    private void jButton_calfitActionPerformed(java.awt.event.ActionEvent evt) {     
	   if(cal_im!=null){
		   if(!isNumeric(jTextField_stepsize.getText())){
	    		cal = new Calibrator(cal_im, default_step, roi);
	    	}	else if(jTextField_stepsize.getText().equals(Integer.toString(default_step))){
	    		cal = new Calibrator(cal_im, default_step, roi);
	    	} else {
	    		cal = new Calibrator(cal_im, zstep, roi);
	    	}
    		cal.fitStack(jTextField_calfit);													// Passing a component to update it....
    		jTextField_calfit.setText("In progress");
    		stack_fitted=true;
    	} else {
    		JOptionPane.showMessageDialog(this,
    			    "No image loaded",
    			    "Warning",
    			    JOptionPane.WARNING_MESSAGE);
    	}
    }                                              

    // fit the curves
    private void jButton_calfitcurvesActionPerformed(java.awt.event.ActionEvent evt) {   
 	    if(stack_fitted){
	    	if(!isNumeric(jTextField_rangemin.getText())){										// case empty textfield
	    		rangeMin = default_rmin; 
	    	} else if(jTextField_rangemin.getText().equals(Integer.toString(default_rmin))){	// case nothing has been modified
	    		rangeMin = default_rmin; 
	    	}
	    	
	    	if(!isNumeric(jTextField_rangemax.getText())){
	    		rangeMax = default_rmax; 
	    	} else if(jTextField_rangemax.getText().equals(Integer.toString(default_rmax))){
	    		rangeMax = default_rmax; 
	    	}
	    	
	    	cal.fitCalibrationCurve(jTextField_calfitcurves,rangeMin, rangeMax);			    // same here
			jTextField_calfit.setText("In progress");
			curve_fitted = true;
 	    } else {
    		JOptionPane.showMessageDialog(this,
    			    "No fitted stack",
    			    "Warning",
    			    JOptionPane.WARNING_MESSAGE);
 	    }
    }                                                    

    // save the calibration
    private void jButton_calsaveActionPerformed(java.awt.event.ActionEvent evt) {                                                
    	if(curve_fitted){ 
	    	JFileChooser fileChooser = new JFileChooser();
	    	fileChooser.setDialogTitle("Save calibration");   
	        FileNameExtensionFilter filter = new FileNameExtensionFilter("Csv files", "csv");
	        fileChooser.setFileFilter(filter);
	
	    	int userSelection = fileChooser.showSaveDialog(this);
	    	 
	    	if (userSelection == JFileChooser.APPROVE_OPTION) {
	    	    File file = fileChooser.getSelectedFile();
	    	    cal.saveCalib(file+".csv");
	    	}
    	} else {
    		
    	}
    	//cal.saveCalib("dummy");
    }                                               


    /////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////
    // Localize
    
    // load calibration
    private void jButton_loadcalActionPerformed(java.awt.event.ActionEvent evt) {                                                
        calib = new Calibration();
        JFileChooser jf = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Csv files", "csv");
        jf.setFileFilter(filter);
    	jf.setDialogTitle("Load calibration");   
   	 
    	int userSelection = jf.showOpenDialog(this);
    	 
    	if (userSelection == JFileChooser.APPROVE_OPTION) {
    	    File file = jf.getSelectedFile();
            calib.readCSV(file.getAbsolutePath());
            jTextField_loccalname.setText(file.getName());
    	}
        
    }                                               

    // load images
    private void jButton_loadimActionPerformed(java.awt.event.ActionEvent evt) {                                               
    	JFileChooser fc = new JFileChooser();
    	fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
    	
    	int returnVal = fc.showOpenDialog(this);
    	 
        if (returnVal != JFileChooser.APPROVE_OPTION)
        	return;
        
        File file = fc.getSelectedFile();
        jTextField_imname.setText(file.getName());
        loc_filePath = file.getAbsolutePath();
        
        if (file.isDirectory()){
        	loc_im = FolderOpener.open(loc_filePath);
        }
        
        if (file.isFile()){
        	loc_im = new ImagePlus(loc_filePath);
        }
        
        
        loc_nSlice = loc_im.getNSlices();
		new StackWindow(loc_im);
    }                                              

    // fit method 
    private void jComboBox_fitmethodPropertyChange(java.beans.PropertyChangeEvent evt) {                                                   
    	JComboBox combo = (JComboBox)evt.getSource();
        int ind = combo.getSelectedIndex();
        switch(ind){
        case 0:
        	fitmethod = "2DG";
        	break;
        	
        case 1:
        	fitmethod = "1DG";
        	break;
        	
        case 2:
        	fitmethod = "centroid";
        	break;
        }
    }    
    
    // median filter
    private void jCheckBox_medianfilterActionPerformed(java.awt.event.ActionEvent evt){
    	median_filt = jCheckBox_medianfilter.isSelected();
    }

    // fit frames
    private void jButton_locfitActionPerformed(java.awt.event.ActionEvent evt) {                                               
    	if(loc_im!=null && calib!=null){
    		Thread thread = new Thread() {
    	        public void run() {
    	            p = new Pipeline(calib, winsize, fitmethod, loc_im, median_filt);
    	            p.run();
    	        }
    	    };
    	    thread.start();
    		
    	} else {
    		JOptionPane.showMessageDialog(this,
    			    "Images or calibration not imported",
    			    "Warning",
    			    JOptionPane.WARNING_MESSAGE);
    	}
    }                                              

    private void jButton_locstopActionPerformed(java.awt.event.ActionEvent evt) {                                                
    	p.stopThreads();
    }
    
    // Save 
    private void jButton_locsaveActionPerformed(java.awt.event.ActionEvent evt) {                                                
    	if(p.getNumPeaks()>0){
	    	JFileChooser jf = new JFileChooser();
	        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text files", "txt");
	        jf.setFileFilter(filter);
	    	jf.setDialogTitle("Save results");   
	   	 
	    	int userSelection = jf.showSaveDialog(this);
	    	 
	    	if (userSelection == JFileChooser.APPROVE_OPTION) {
	    	    File file = jf.getSelectedFile();
	    	    p.saveTXT(file.getAbsolutePath());
	    	}
	    } else {
    		JOptionPane.showMessageDialog(this,
    			    "No peak to save",
    			    "Warning",
    			    JOptionPane.WARNING_MESSAGE);
	    }
    }                                       

    ///////////////////////////////////////////////////////////////////
    /// Misc functions
    public boolean isNumeric(String s) {
        return s.matches("[-+]?\\d*\\.?\\d+");
    }
    
    //////////////////////////////////////////////////////////////////
    // Variables declaration - do not modify
    
    // calibration
    String cal_filePath;
    ImagePlus cal_im;
    int cal_nSlice, zstep;
    boolean isRoi = false;
    Roi roi;
    Calibrator cal;
    int rangeMin, rangeMax;
    boolean stack_fitted=false;
    boolean curve_fitted=false;
    static final int default_step = 10;
    static final int default_rmin = 0;
    static final int default_rmax = 200;
       
    // localize
    Calibration calib;
    String calibrationPath, loc_filePath, fitmethod="2DG";
    ImagePlus loc_im;
    int loc_nSlice;
    int winsize;
    boolean median_filt = true;

    static final int default_wsize = 5;
    static final String default_fit = "1DG";
    
    Pipeline p;
    
    // swing
    private javax.swing.JButton jButton_cal;
    private javax.swing.JButton jButton_calfit;
    private javax.swing.JButton jButton_calfitcurves;
    private javax.swing.JButton jButton_calsave;
    private javax.swing.JButton jButton_import;
    private javax.swing.JButton jButton_loadcal;
    private javax.swing.JButton jButton_loadim;
    private javax.swing.JButton jButton_loc;
    private javax.swing.JButton jButton_locfit;
    private javax.swing.JButton jButton_locsave;
    private javax.swing.JButton jButton_roi;
    private javax.swing.JButton jButton_locstop;
    private javax.swing.JCheckBox jCheckBox_medianfilter;
    private javax.swing.JComboBox jComboBox_fitmethod;
    private javax.swing.JLabel jLabel_fitmethod;
    private javax.swing.JLabel jLabel_range;
    private javax.swing.JLabel jLabel_rangehyph;
    private javax.swing.JLabel jLabel_stepsize;
    private javax.swing.JLabel jLabel_winsize;
    private javax.swing.JTextField jTextField_calfit;
    private javax.swing.JTextField jTextField_calfitcurves;
    private javax.swing.JTextField jTextField_calimname;
    private javax.swing.JTextField jTextField_imname;
    private javax.swing.JTextField jTextField_loccalname;
    private javax.swing.JTextField jTextField_rangemax;
    private javax.swing.JTextField jTextField_rangemin;
    private javax.swing.JTextField jTextField_roi;
    private javax.swing.JTextField jTextField_stepsize;
    private javax.swing.JTextField jTextField_winsize;
    private javax.swing.JPanel jpanel_cal;
    private javax.swing.JPanel jpanel_default;
    private javax.swing.JPanel jpanel_loc;
    private javax.swing.JPanel panel;
    // End of variables declaration                   
}
